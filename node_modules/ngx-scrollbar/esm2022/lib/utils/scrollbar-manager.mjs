import { Injectable, inject, signal, PLATFORM_ID } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { NG_SCROLLBAR_POLYFILL } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
// This CDN link is for a modified version of the polyfill to fix the firefox bug https://github.com/MurhafSousli/ngx-scrollbar/issues/615
const scrollTimelinePolyfillUrl = 'https://cdn.statically.io/gist/MurhafSousli/c852b6a672069396953f06ddd4b64620/raw/7089126915c424e85fba611d179fc5687b8743a0/scroll-timeline.js';
export class ScrollbarManager {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._polyfillUrl = inject(NG_SCROLLBAR_POLYFILL, { optional: true }) || scrollTimelinePolyfillUrl;
        this.document = inject(DOCUMENT);
        this.window = this.document.defaultView;
        this.scrollTimelinePolyfill = signal(null);
        if (this.isBrowser && (!this.window['ScrollTimeline'] || !CSS.supports('animation-timeline', 'scroll()'))) {
            this.initPolyfill();
        }
    }
    async initPolyfill() {
        try {
            // Create a script element
            const script = this.document.createElement('script');
            script.src = this._polyfillUrl;
            // Wait for the script to load
            await new Promise((resolve, reject) => {
                script.onload = resolve;
                script.onerror = reject;
                this.document.head.appendChild(script);
            });
            // Once loaded, access and execute the function attached to the window object
            if (this.window['ScrollTimeline']) {
                this.scrollTimelinePolyfill.set(this.window['ScrollTimeline']);
            }
            else {
                console.error('[NgScrollbar]: ScrollTimeline is not attached to the window object.');
            }
        }
        catch (error) {
            console.error('[NgScrollbar]: Error loading ScrollTimeline script:', error);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ScrollbarManager, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ScrollbarManager, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: ScrollbarManager, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvdXRpbHMvc2Nyb2xsYmFyLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFrQixXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOztBQUc5RCwwSUFBMEk7QUFDMUksTUFBTSx5QkFBeUIsR0FBVyw4SUFBOEksQ0FBQztBQUd6TCxNQUFNLE9BQU8sZ0JBQWdCO0lBWTNCO1FBVmlCLGNBQVMsR0FBWSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUVwRSxpQkFBWSxHQUFXLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLHlCQUF5QixDQUFDO1FBRXRHLGFBQVEsR0FBYSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEMsV0FBTSxHQUFXLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1FBRTNDLDJCQUFzQixHQUF1QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFHakYsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMxRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNoQixJQUFJLENBQUM7WUFDSCwwQkFBMEI7WUFDMUIsTUFBTSxNQUFNLEdBQXNCLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUUvQiw4QkFBOEI7WUFDOUIsTUFBTSxJQUFJLE9BQU8sQ0FBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDM0MsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO2dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDLENBQUM7WUFFSCw2RUFBNkU7WUFDN0UsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNqRSxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO1lBQ3ZGLENBQUM7UUFDSCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMscURBQXFELEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDOUUsQ0FBQztJQUNILENBQUM7OEdBeENVLGdCQUFnQjtrSEFBaEIsZ0JBQWdCLGNBREgsTUFBTTs7MkZBQ25CLGdCQUFnQjtrQkFENUIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpbmplY3QsIHNpZ25hbCwgV3JpdGFibGVTaWduYWwsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5ULCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE5HX1NDUk9MTEJBUl9QT0xZRklMTCB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFRpbWVsaW5lRnVuYyB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbi8vIFRoaXMgQ0ROIGxpbmsgaXMgZm9yIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgcG9seWZpbGwgdG8gZml4IHRoZSBmaXJlZm94IGJ1ZyBodHRwczovL2dpdGh1Yi5jb20vTXVyaGFmU291c2xpL25neC1zY3JvbGxiYXIvaXNzdWVzLzYxNVxyXG5jb25zdCBzY3JvbGxUaW1lbGluZVBvbHlmaWxsVXJsOiBzdHJpbmcgPSAnaHR0cHM6Ly9jZG4uc3RhdGljYWxseS5pby9naXN0L011cmhhZlNvdXNsaS9jODUyYjZhNjcyMDY5Mzk2OTUzZjA2ZGRkNGI2NDYyMC9yYXcvNzA4OTEyNjkxNWM0MjRlODVmYmE2MTFkMTc5ZmM1Njg3Yjg3NDNhMC9zY3JvbGwtdGltZWxpbmUuanMnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGlzQnJvd3NlcjogYm9vbGVhbiA9IGlzUGxhdGZvcm1Ccm93c2VyKGluamVjdChQTEFURk9STV9JRCkpO1xyXG5cclxuICByZWFkb25seSBfcG9seWZpbGxVcmw6IHN0cmluZyA9IGluamVjdChOR19TQ1JPTExCQVJfUE9MWUZJTEwsIHsgb3B0aW9uYWw6IHRydWUgfSkgfHwgc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbFVybDtcclxuXHJcbiAgcmVhZG9ubHkgZG9jdW1lbnQ6IERvY3VtZW50ID0gaW5qZWN0KERPQ1VNRU5UKTtcclxuXHJcbiAgcmVhZG9ubHkgd2luZG93OiBXaW5kb3cgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG5cclxuICByZWFkb25seSBzY3JvbGxUaW1lbGluZVBvbHlmaWxsOiBXcml0YWJsZVNpZ25hbDxTY3JvbGxUaW1lbGluZUZ1bmM+ID0gc2lnbmFsKG51bGwpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGlmICh0aGlzLmlzQnJvd3NlciAmJiAoIXRoaXMud2luZG93WydTY3JvbGxUaW1lbGluZSddIHx8ICFDU1Muc3VwcG9ydHMoJ2FuaW1hdGlvbi10aW1lbGluZScsICdzY3JvbGwoKScpKSkge1xyXG4gICAgICB0aGlzLmluaXRQb2x5ZmlsbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgaW5pdFBvbHlmaWxsKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ3JlYXRlIGEgc2NyaXB0IGVsZW1lbnRcclxuICAgICAgY29uc3Qgc2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHNjcmlwdC5zcmMgPSB0aGlzLl9wb2x5ZmlsbFVybDtcclxuXHJcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBzY3JpcHQgdG8gbG9hZFxyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZTxFdmVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlO1xyXG4gICAgICAgIHNjcmlwdC5vbmVycm9yID0gcmVqZWN0O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIE9uY2UgbG9hZGVkLCBhY2Nlc3MgYW5kIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3cgb2JqZWN0XHJcbiAgICAgIGlmICh0aGlzLndpbmRvd1snU2Nyb2xsVGltZWxpbmUnXSkge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVGltZWxpbmVQb2x5ZmlsbC5zZXQodGhpcy53aW5kb3dbJ1Njcm9sbFRpbWVsaW5lJ10pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tOZ1Njcm9sbGJhcl06IFNjcm9sbFRpbWVsaW5lIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgd2luZG93IG9iamVjdC4nKTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW05nU2Nyb2xsYmFyXTogRXJyb3IgbG9hZGluZyBTY3JvbGxUaW1lbGluZSBzY3JpcHQ6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=